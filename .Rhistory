#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
system(cmd)
system()
system("ls")
system("rm src/main/java/*")
system("rm src/main/java/*; cp gbm_pojo_test.java src/main/java")
system("rm src/main/java/* && cp gbm_pojo_test.java src/main/java")
system("rm src/main/java/* \; cp gbm_pojo_test.java src/main/java")
system("rm src/main/java/* & cp gbm_pojo_test.java src/main/java")
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
shell(cmd)
cmd=
"
rm src/main/java/*;
cp gbm_pojo_test.java src/main/java;
cp GenMod/GenModel.java src/main/java;
mvn generate-sources;
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
shell(cmd)
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
system("shell.sh")
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
system("shell.sh")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
system("shell.sh gbm_pojo_test.java gbm_pojo_test.js")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
system("shell.sh gbm_pojo_test.java gbm_pojo_test.js")
system("./shell.sh gbm_pojo_test.java gbm_pojo_test.js")
system("./shell.sh", input="gbm_pojo_test.java gbm_pojo_test.js")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
system("rm src/main/java/*")
system("cp gbm_pojo_test.js src/main/java")
system("cp gbm_pojo_test.java src/main/java")
system("cp GenMod/GenModel.java src/main/java")
system("cp GenMod/GenModel.java src/main/java")
system("mvn generate-sources")
system("mv target/js/bundle.js .")
system("mv bundle.js gbm_pojo_test.js")
system("rm -rf target/")
system("rm -r src/main/java/*")
jsweet_filter("gbm_pojo_test.js")
paste0(str_extract("sdfajlfkjldf/sdlfjlkdf/alfjdf/pojo_jake.java", regex('([^/]+)(?=\\.[^.]+)')),".js")
fn="pojo_jake.java"
paste("cp", fn, "src/main/java")
paste("mv bundle.js", jsOut)
jsOut="pojo_jake.js"
paste("mv bundle.js", jsOut)
print("sdf", "sdfd")
evaporate("gbm_pojo_test.java")
source("pojoFilter.R")
source("jsweetFilter.R")
evaporate <- function(pojo) {
# Get name of file when it is in JavaScript
jsOut=paste0(str_extract(pojo, regex('([^/]+)(?=\\.[^.]+)')),".js")
# Filter out POJO to make it H2O-independent
pojo_filter(pojo)
# bash commands to prepare & call JSweet
system("rm src/main/java/*")
system(paste("cp", pojo, "src/main/java"))
system("cp GenMod/GenModel.java src/main/java")
system("mvn generate-sources")
system("mv target/js/bundle.js .")
system(paste("mv bundle.js", jsOut))
system("rm -rf target/")
system("rm -r src/main/java/*")
# Finally, round out left-over java syntax from JSweet
jsweet_filter(jsOut)
print(paste(pojo, "has now been transpiled into", jsOut))
}
evaporate("gbm_pojo_test.java")
evaporate("gbm_pojo_test.java")
evaporate("gbm_pojo_test.java")
js_class="gbm_pojo"
paste0("const ", js_class, "=require(\"", js_class,"\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
paste0("const ", js_class, "=require(", shQuote(js_class), "; let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
shQuote(js_class)
js_class="gbm_pojo"
imp=paste0("const ", js_class, "=require(", shQuote(js_class), "; let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
write(imp, "test.txt")
js_class="gbm_pojo"
imp=paste0("const ", js_class, "=require(", shQuote(js_class), "); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
write(imp, "test.txt")
js_class="gbm_pojo"
imp=paste0("const ", js_class, "=require(./\"", js_class, "\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
write(imp, "test.txt")
js_class="gbm_pojo"
imp=paste0("const ", js_class, "=require(\"./", js_class, "\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
write(imp, "test.txt")
js_class="gbm_pojo"
imp=paste0("const ", js_class, "=require(\"./", js_class, ".js\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
write(imp, "test.txt")
source('~/karandeep/vaporize/browserify.R')
x = readLines("test.txt")
x
prepend()
prepend(x, 'a')
c("first line?", x)
y = c("first line?", x)
writeLines(y, "test.txt")
source('~/karandeep/vaporize/main.R', echo=TRUE)
js_file="gbm_pojo_test.js"
js_class=str_extract(js_file, regex('([^/]+)(?=\\.[^.]+)'))
imp=paste0("const ", js_class, "=require(\"./", js_class, ".js\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
imp
gen_main=readline("gen_main.js")
gen_main=readline("gen_main.js")
gen_main
gen_main=readline("gen_main.js")
gen_main
gen_main=readLines("gen_main.js")
gen_main
gen_html=readLines("gen_html.js")
main_txt=c(imp, gen_main)
html_txt=c(imp, gen_html)
main_txt
html_txt=c(imp, gen_html)
write(imp, "main.js")
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
system("node gen_html.js > index.html")
system("node gen_main.js >> main.js")
system("browserify --debug main.js -o bundle.js")
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
system("node gen_html.js > index.html")
js_file="gbm_pojo_test.js"
js_class=str_extract(js_file, regex('([^/]+)(?=\\.[^.]+)'))
imp=paste0("const {", js_class, "}=require(\"./", js_class, ".js\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
gen_main=readLines("gen_main.js")
gen_html=readLines("gen_html.js")
main_txt=c(imp, gen_main)
html_txt=c(imp, gen_html)
write(imp, "main.js")
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
system("node gen_html.js > index.html")
imp
system("sed -i \"/require/d\" gen_main.js")
system("sed -i \"/require/d\" gen_main.js")
js_file="gbm_pojo_test.js"
js_class=str_extract(js_file, regex('([^/]+)(?=\\.[^.]+)'))
imp=paste0("const {", js_class, "}=require(\"./", js_class, ".js\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
gen_main=readLines("gen_main.js")
gen_html=readLines("gen_html.js")
main_txt=c(imp, gen_main)
html_txt=c(imp, gen_html)
write(imp, "main.js")
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
system("node gen_html.js > index.html")
system("sed -i \"/require/d\" gen_html.js")
system("sed -i \"/require/d\" gen_main.js")
system("sed -i \"/require/d\" gen_html.js")
js_file="gbm_pojo_test.js"
js_class=str_extract(js_file, regex('([^/]+)(?=\\.[^.]+)'))
imp=paste0("const {", js_class, "}=require(\"./", js_class, ".js\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
gen_main=readLines("gen_main.js")
gen_html=readLines("gen_html.js")
main_txt=c(imp, gen_main)
html_txt=c(imp, gen_html)
write(imp, "main.js")
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
system("node gen_html.js > index.html")
system("node gen_main.js >> main.js")
system("browserify --debug main.js -o bundle.js")
system("sed -i \"/require/d\" gen_main.js")
system("sed -i \"/require/d\" gen_html.js")
system("mkdir browser")
system("mv index.html browser/")
system("node gen_html.js > index.html")
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
system("node gen_html.js > index.html")
system("node gen_main.js >> main.js")
system("browserify --debug main.js -o bundle.js")
system("sed -i \"/require/d\" gen_main.js")
system("sed -i \"/require/d\" gen_html.js")
system("mkdir browser")
system("mv index.html browser/")
html_txt=c(imp, gen_html)
write(imp, "main.js")
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
system("node gen_html.js > index.html")
system("node gen_html.js > index.html")
system("node gen_html.js > index.html")
system("echo hello > out.txt")
system("node gen_main.js >> main.js")
"node gen_main.js >> main.js"
system("node gen_main.js >> main.js")
system("node gen_main.js")
system("node gen_main.js > out.txt")
system("echo hello > out.txt")
system("echo hello \> out.txt")
system("echo hello \\> out.txt")
print("echo this > out.xt")
system("echo this > out.txt")
system("echo this | out.txt")
js_file="gbm_pojo_test.js"
js_class=str_extract(js_file, regex('([^/]+)(?=\\.[^.]+)'))
imp=paste0("const {", js_class, "}=require(\"./", js_class, ".js\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
gen_main=readLines("gen_main.js")
gen_html=readLines("gen_html.js")
main_txt=c(imp, gen_main)
write(imp, "main.js")
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
x = system("node gen_html.js")
x
x = system("node gen_html.js", intern=TRUE)
x
x=system("node gen_html.js", intern=TRUE)
y=system("node gen_main.js", intern=TRUE)
js_file="gbm_pojo_test.js"
js_class=str_extract(js_file, regex('([^/]+)(?=\\.[^.]+)'))
imp=paste0("const {", js_class, "}=require(\"./", js_class, ".js\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
gen_main=readLines("gen_main.js")
gen_html=readLines("gen_html.js")
main_txt=c(imp, gen_main)
html_txt=c(imp, gen_html)
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
x=system("node gen_html.js", intern=TRUE)
x
system("sed -i \"/require/d\" gen_main.js")
system("sed -i \"/require/d\" gen_html.js")
js_file="gbm_pojo_test.js"
js_class=str_extract(js_file, regex('([^/]+)(?=\\.[^.]+)'))
imp=paste0("const {", js_class, "}=require(\"./", js_class, ".js\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
gen_main=readLines("gen_main.js")
gen_html=readLines("gen_html.js")
main_txt=c(imp, gen_main)
html_txt=c(imp, gen_html)
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
x=system("node gen_html.js", intern=TRUE)
y=system("node gen_main.js", intern=TRUE)
write(imp, "main.js")
write(x, "test.txt")
system("sed -i \"/require/d\" gen_main.js")
system("sed -i \"/require/d\" gen_html.js")
js_file="gbm_pojo_test.js"
js_class=str_extract(js_file, regex('([^/]+)(?=\\.[^.]+)'))
imp=paste0("const {", js_class, "}=require(\"./", js_class, ".js\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
gen_main=readLines("gen_main.js")
gen_html=readLines("gen_html.js")
main_txt=c(imp, gen_main)
html_txt=c(imp, gen_html)
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
m=system("node gen_main.js", intern=TRUE)
h=system("node gen_html.js", intern=TRUE)
write(imp, "main.js")
write(m, "main.js", append=TRUE)
write(h, "index.html")
system("browserify --debug main.js -o bundle.js")
system("sed -i \"/require/d\" gen_main.js")
system("sed -i \"/require/d\" gen_html.js")
system("mkdir browser")
system("mv index.html browser/")
system("mv main.js browser/")
system("mv bundle.js browser/")
m
paste(imp, main_txt)
main_txt
imp
paste(imp, maintainer())
paste(imp, main_txt)
write(paste(imp, main_txt), "test.txt")
write(paste(main_txt), "test.txt")
write(c(im, main_txt), "test.txt")
f=c(imp, main_txt)
write(f, "test.txt")
f=c(imp, m)
write(f, "test.txt")
m
system("sed -i \"/require/d\" gen_main.js")
system("sed -i \"/require/d\" gen_html.js")
js_file="gbm_pojo_test.js"
js_class=str_extract(js_file, regex('([^/]+)(?=\\.[^.]+)'))
imp=paste0("const {", js_class, "}=require(\"./", js_class, ".js\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
gen_main=readLines("gen_main.js")
gen_html=readLines("gen_html.js")
main_txt=c(imp, gen_main)
html_txt=c(imp, gen_html)
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
f=system("node gen_main.js", intern=TRUE)
h=system("node gen_html.js", intern=TRUE)
m=c(imp, f)
write(f, "main.js")
write(h, "index.html")
system("browserify --debug main.js -o bundle.js")
system("sed -i \"/require/d\" gen_main.js")
system("sed -i \"/require/d\" gen_html.js")
system("mkdir browser")
system("mv index.html browser/")
system("mv main.js browser/")
system("mv bundle.js browser/")
js_file="gbm_pojo_test.js"
js_class=str_extract(js_file, regex('([^/]+)(?=\\.[^.]+)'))
imp=paste0("const {", js_class, "}=require(\"./", js_class, ".js\"); let m=new ", js_class, "(); let n=", js_class, ".NAMES_$LI$();")
gen_main=readLines("gen_main.js")
gen_html=readLines("gen_html.js")
main_txt=c(imp, gen_main)
html_txt=c(imp, gen_html)
writeLines(main_txt, "gen_main.js")
writeLines(html_txt, "gen_html.js")
f=system("node gen_main.js", intern=TRUE)
h=system("node gen_html.js", intern=TRUE)
m=c(imp, f)
write(m, "main.js")
write(h, "index.html")
system("browserify --debug main.js -o bundle.js")
system("sed -i \"/require/d\" gen_main.js")
system("sed -i \"/require/d\" gen_html.js")
system("mkdir browser")
system("mv index.html browser/")
system("mv main.js browser/")
system("mv bundle.js browser/")
js_file=evaporate("gbm_pojo_test.java")
browserify(js_file)
source("browserify.R")
browserify(js_file)
jsOut
js_file
js_file
browserify("gbm_pojo_test.js")
js_file=evaporate("gbm_pojo_test.java")
browserify(js_file)
js_file
source("pojoFilter.R")
source("jsweetFilter.R")
source("browserify.R")
evaporate <- function(pojo) {
# Get name of file when it is in JavaScript
jsOut=paste0(str_extract(pojo, regex('([^/]+)(?=\\.[^.]+)')),".js")
# Filter out POJO to make it H2O-independent
pojo_filter(pojo)
# bash commands to prepare & call JSweet
system("rm src/main/java/*")
system(paste("cp", pojo, "src/main/java"))
system("cp GenMod/GenModel.java src/main/java")
system("mvn generate-sources")
system("mv target/js/bundle.js .")
system(paste("mv bundle.js", jsOut))
system("rm -rf target/")
system("rm -r src/main/java/*")
# Finally, round out left-over java syntax from JSweet
jsweet_filter(jsOut)
return(jsOut)
}
js_file=evaporate("gbm_pojo_test.java")
print(js_file)
browserify(js_file)
vaporize("gbm_pojo_test.java")
source('~/karandeep/vaporize/vaporize.R', echo=TRUE)
source('~/karandeep/vaporize/vaporize.R', echo=TRUE)
source('~/karandeep/vaporize/vaporize.R', echo=TRUE)
vaporize("gbm_pojo_test.java")
source("browserify.R")
source("evaporate.R")
source("browserify.R")
vaporize <- function(pojo) {
# TURN POJO INTO JAVASCRIPT FILE
js_file=evaporate(pojo)
print(paste(pojo, "has been transpiled into", js_file))
# TURN JAVASCRIPT FILE INTO HTML
browserify(js_file)
print("all necessary files have been created in browser/ folder")
}
vaporize("gbm_pojo_test.java")
source("evaporate.R")
source("browserify.R")
vaporize <- function(pojo) {
# TURN POJO INTO JAVASCRIPT FILE
js_file=evaporate(pojo)
print(paste(pojo, "has been transpiled into", js_file))
# TURN JAVASCRIPT FILE INTO HTML
browserify(js_file)
print("all necessary files have been created in browser/ folder")
}
vaporize("gbm_pojo_test.java")
vaporize("gbm_pojo_test.java")
vaporize("gbm_pojo_test.java")
file.exists("test/hello.js")
x = readLines("test/hello.js")
x
if ("hello" in x)
'hello' %in% x
x
match("hello", x)
x
library(stringr)
sstr_detect(x, "hello")
str_detect(x, "hello")
x = c(x, "what'up")
str_detect(x, "hello")
if (str_detect(x, "hello")) print("ys")
if (str_detect(x, "hello")) {print("ys")}
if (any(str_detect(x, "hello"))) {print("ys")}
bund=any(str_detect(p, "<bundle>true</bundle>"))
# First, check if the bundle option is set to true
p=readLines("pom.xml")
bund=any(str_detect(p, "<bundle>true</bundle>"))
bund
&&
file.exists("target/js/bundle.js") & bund
file.exists("target/js/bundle.js") && bund
bund
!bund
dir.create("a/b/c")
dir.create("a/")
dir.create("a/b/")
dir.create("a/b/c")
dir.create("a/b/c/d")
system("l")
system("ls")
system("rm -rf a")
file.exists("a/")
dir.exists("src")
dir.exists("srsc")
dir.exists("src/main/java")
dir.exists("src/main/")
dir.exists("src/")
evaporate("gbm_pojo_test.java")
source('~/karandeep/vaporize/evaporate.R', echo=TRUE)
str_detect(readLines("pom.xml"), "bundle")
any(str_detect(readLines("pom.xml"), "bundle"))
any(str_detect(readLines("pom.xml"), "<bundle>true</bundle>"))
any(str_detect(readLines("pom.xml"), "<bundle>true</bundle>"))
any(str_detect(readLines("pom.xml"), "<bundle>true</bundle>"))
source('~/karandeep/vaporize/evaporate.R', echo=TRUE)
evaporate("gbm_pojo_test.java")
paste0("const {GenModel}=require(\"./GenModel\");"))
paste0("const {GenModel}=require(\"./GenModel\");")
imp_msg=paste0("const {GenModel}=require(\"./GenModel\");")
imp_msg
x = c(imp_msg, readLines("gbm_test_pojo.js"))
x = c(imp_msg, readLines("gbm_pojo_test.js"))
x
write(x, "test.txt")
source('~/karandeep/vaporize/evaporate.R', echo=TRUE)
jsweet_filter("GenModel.js")
new_line=str_replace_all(new_line, fixed(java_doubleToBits), fixed(jvsc_doubleToBits))
source('~/karandeep/vaporize/jsweetFilter.R', echo=TRUE)
source('~/karandeep/vaporize/jsweetFilter.R', echo=TRUE)
jsweet_filter("GenModel.js")
jsOut="gbm_pojo_test.js"
write(c("const {GenModel}=require(\"./GenModel\");",
readLines(jsOut)),
jsOut)
write(c("const {GenModel}=require(\"./GenModel\");",
readLines(jsOut)),
jsOut)
c("const {GenModel}=require(\"./GenModel\");", readLines(jsOut))
write(c("const {GenModel}=require(\"./GenModel\");", readLines(jsOut)),
file=jsOut)
x = c("const {GenModel}=require(\"./GenModel\");", readLines(jsOut))
write(x, file=jsOut)
write(x, file=jsOut)
write(x, file=jsOut)
file=jsOut)
write(x, file=jsOut)
write(x, file=jsOut)
jsOut="gbm_pojo_test.js"
x = c("const {GenModel}=require(\"./GenModel\");", readLines(jsOut))
write(x, file=jsOut)
evaporate("gbm_pojo_test.java")
source('~/karandeep/vaporize/evaporate.R', echo=TRUE)
source('~/karandeep/vaporize/evaporate.R', echo=TRUE)
evaporate("gbm_pojo_test.java")
exit(0)
stop()
stop("file not present. abort")
vaporize("gbm_pojo_test.java")
source('~/karandeep/vaporize/vaporize.R', echo=TRUE)
source('~/karandeep/vaporize/vaporize.R', echo=TRUE)
source('~/karandeep/vaporize/vaporize.R', echo=TRUE)
