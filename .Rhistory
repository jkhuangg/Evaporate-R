getwd()
list.files()
list.files(())
list.files()
readline("gbm_pojo_test.jav")
readline("gbm_pojo_test.java")
readLines("gbm_pojo_test.java")
pojo = readLines("gbm_pojo_test.java")
pojo
}
for(x=0; x<old_pojo.length; x++) {
}
old_pojo.length
old_pojo.length()
op = readLines("gbm_pojo_test.java")
str_detect()
library(stringi)
line="@ModelPojo(name="gbm_pojo_test", algorithm="gbm")"
line="@ModelPojo(name=\"gbm_pojo_test\", algorithm=\"gbm\")"
line
op[3]
op[21]
stri_detect(line, "^@ModelPojo")
stri_detect(line, regex("^@ModelPojo"))
str_detect(line, regex("^@ModelPojo"))
library(stringr)
str_detect(line, regex("^@ModelPojo"))
op=readLines("gbm_pojo_test.java")
str_detect(op[56], regex(".*super.*(.*)"))
op[56]
op[27]
str_detect(op[27], regex(".*super.*(.*)"))
str_detect(op[20], regex("^import hex.*"))
str_detect(op[21], regex("^import hex.*"))
str_detect(op[22], regex("^import hex.*"))
str_replace_all(op[78], " extends GenModel", "")
op[78]
str_replace_all(op[24], " extends GenModel", "")
source('~/karandeep/evr/evr.R', echo=TRUE)
op
op[0]
source('~/karandeep/evr/evr.R', echo=TRUE)
source('~/karandeep/evr/evr.R', echo=TRUE)
source('~/karandeep/evr/evr.R', echo=TRUE)
source('~/karandeep/evr/evr.R', echo=TRUE)
source('~/karandeep/evr/evr.R', echo=TRUE)
source('~/karandeep/evr/evr.R', echo=TRUE)
source('~/karandeep/evr/evr.R', echo=TRUE)
source('~/karandeep/evr/evr.R', echo=TRUE)
op[999]
op[1000]
op
op[2000]
while(!is.na[op[x]]) {x=x+1}
while(!is.na(op[x])) {x=x+1}
source('~/karandeep/evr/evr.R', echo=TRUE)
source('~/karandeep/evr/evr.R', echo=TRUE)
source('~/karandeep/evr/evr.R', echo=TRUE)
new_line=str_replace_all(op[24], " extends GenModel", "")
str_replace_all(op[24], " extends GenModel", "")
source('~/karandeep/evr/evr.R', echo=TRUE)
op[24]
str_detect(op[24], " extendsd GenModel")
str_detect(op[24], " extends GenModel")
source('~/karandeep/evr/evr.R', echo=TRUE)
source('~/karandeep/evr/pojoFilter.R', echo=TRUE)
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
str_replace_all(ojs[28], java_arrFill, "preds.fill(0);")
java_arrFill
str_detect(ojs[28], java_arrFill)
ojs[28]
str_detect(ojs[28], "java.util.Arrays.fill(preds,0);")
str_detect(ojs[28], "java.util.Arrays.fill(preds,0)")
ojs[28]
str_detect(ojs[28], "java")
str_detect(ojs[28], "java.util.")
str_detect(ojs[28], "java.util.Arrays.")
str_detect(ojs[28], "java.util.Arrays.fill")
str_detect(ojs[28], "java.util.Arrays.fill(preds")
str_detect(ojs[28], "java.util.Arrays.fill")
str_detect(ojs[28], "java.util.Arrays.fill(")
str_detect(ojs[28], fixed("java.util.Arrays.fill(preds,0);"))
str_detect(ojs[28], fixed("java.util.Arrays.fill(preds,0);"))
str_detect(ojs[28], fixed("java.util.Arrays.fill(preds,0)"))
str_detect(ojs[28], fixed("java.util.Arrays.fill(preds,0)";))
str_detect(ojs[28], fixed("java.util.Arrays.fill(preds,0);"))
stringr::str_detect(ojs[28], fixed("java.util.Arrays.fill(preds,0);"))
stringr::str_detect(ojs[28], "java.util.Arrays.fill(preds,0);")
stringr::str_detect(ojs[28], "java.util.Arrays.fill(preds,0);")
stringr::str_detect(ojs[28], "java.util.Arrays.fill(preds,0);")
stringr::str_detect(ojs[28], "java.util.Arrays.fill(preds,0")
stringr::str_detect(ojs[28], "java.util.Arrays.fill\(preds,0")
stringr::str_detect(ojs[28], "java.util.Arrays.fill\\(preds,0")
stringr::str_detect(ojs[28], "java.util.Arrays.fill\\(preds,0\\)")
stringr::str_detect(ojs[28], "java.util.Arrays.fill\(preds,0\\)")
stringr::str_detect(ojs[28], "java.util.Arrays.fill\\(preds,0\\)")
ojs[28]
stringr::str_detect(ojs[28], "java.util.Arrays.fill\\(preds,0\\);")
java_arrFill
stringr::str_detect(ojs[28], "\\(preds,0\\);")
stringr::str_detect(ojs[28], "(preds,0)")
stringr::str_detect(ojs[28], "\(preds,0\)")
stringr::str_detect(ojs[28], "\\(preds,0\\)")
stringr::str_detect(ojs[28], "\\(preds,0\\)\")
""
""
gsub(ojs[28], java_arrFill, "preds.fill(0);")
ojs[28]
sub(ojs[28], java_arrFill, "preds.fill(0);")
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
# BEGIN WRITING
ojs=readLines("gbm_pojo_test.js")
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
sub(ojs[28], java_arrFill, "preds.fill(0);")
str_replace_all(ojs[28], java_arrFill, "preds.fill(0);")
str_replace_all(ojs[28], java_arrFill, fixed("preds.fill(0);"))
str_replace_all(ojs[28], fixed(java_arrFill), fixed("preds.fill(0);"))
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
source('~/karandeep/evr/pojoFilter.R', echo=TRUE)
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
source('~/karandeep/evr/pojoFilter.R', echo=TRUE)
source('~/karandeep/evr/pojoFilter.R', echo=TRUE)
source('~/karandeep/evr/pojoFilter.R', echo=TRUE)
source('~/karandeep/evr/jsweetFilter.R', echo=TRUE)
hellow("1234")
source('~/karandeep/evr/main.R', echo=TRUE)
source('~/karandeep/evr/main.R', echo=TRUE)
jsf="gbmfile.js"
str_extract(jsf, regex("##*/"))
jsf="sfsdf/afdsf/gbmfile.js"
str_extract(jsf, regex("##*/"))
str_extract(jsf, regex("[^.]+"))
str_extract(jsf, regex("[/^.]+"))
str_extract(jsf, regex("*./"))
str_extract(jsf, regex('*./'))
str_extract(jsf, perl('(?<=[/])([^/]+)(?=\\.[^.]+)'))
str_extract(jsf, rregex('(?<=[/])([^/]+)(?=\\.[^.]+)'))
str_extract(jsf, regex('(?<=[/])([^/]+)(?=\\.[^.]+)'))
jsf
paste0("exports.", gbmfile, "=", gbmfile )
x = js_class
paste0("exports.", js_class, "=", js_class)
paste0("exports.",x, "=", x)
x
x = "js_class"
x
paste0("exports.",x, "=", x)
paste0("exports.",x, "=", x, ";")
source('~/karandeep/evr/main.R', echo=TRUE)
jsweet_filter("gbm_pojo_test.js")
jsweet_filter("gbm_pojo_test.js")
source("pojoFilter.R")
source("jsweetFilter.R")
jsweet_filter("gbm_pojo_test.js")
str_extract(jsweet_file, regex('(?<=[/])([^/]+)(?=\\.[^.]+)'))
jsweet_file="gbm_pojo_test.js"
str_extract(jsweet_file, regex('(?<=[/])([^/]+)(?=\\.[^.]+)'))
jsweet_file="dfaf/adsfa/gbm_pojo_test.js"
str_extract(jsweet_file, regex('(?<=[/])([^/]+)(?=\\.[^.]+)'))
str_extract(jsweet_file, regex('(?<=[/])([/]+)(?=\\.[^.]+)'))
str_extract(jsweet_file, regex('([^/]+)(?=\\.[^.]+)'))
jsweet_file
jsweet_file="gbm_poj.js"
str_extract(jsweet_file, regex('([^/]+)(?=\\.[^.]+)'))
jsweet_filter("gbm_pojo_test.js")
source("jsweetFilter.R")
jsweet_filter("gbm_pojo_test.js")
system(ls)
system("ls")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
cmd=
"
rm src/main/java/*;
cp gbm_pojo_test.java;
cp GenMod/GenModel.java src/main/java/;
mvn generate-sources;
mv target/js/bundle.js .;
mv bundle.js gbm_pojo_test.js;
rm -rf target/
rm src/main/java/*;
echo done!
"
system(cmd)
system("ls")
system("mvn generate-sources")
cmd=
"
mv bundle.js gbm_pojo_test.js;
rm -rf target/;
rm src/main/java/*;
echo done!
"
system(cmd)
cmd=
"
mv target/js/bundle.js .;
mv bundle.js gbm_pojo_test.js;
rm -rf target/;
rm src/main/java/*;
echo done!
"
system(cmd)
system("mv target/js/bundle.js .")
system("mv bundle.js gbm_pojo_test.js")
system("rm -rf target/")
system("rm src/main/java/*")
system("echo done!")
jsweet_filter("gbm_pojo_test.js")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
cmd=
"
rm src/main/java/*;
cp gbm_pojo_test.java;
cp GenMod/GenModel.java src/main/java/;
mvn generate-sources;
mv target/js/bundle.js .;
mv bundle.js gbm_pojo_test.js;
rm -rf target/;
rm src/main/java/*;
echo done!;
"
system(cmd)
jsweet_filter("gbm_pojo_test.js")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
system("shell.sh gbm_pojo_test.java gbm_pojo_test.js")
system("shell.sh gbm_pojo_test.java gbm_pojo_test.js")
system("./shell.sh gbm_pojo_test.java gbm_pojo_test.js")
cmd=
"
rm src/main/java/*;
cp gbm_pojo_test.java src/main/java/;
cp GenMod/GenModel.java src/main/java/;
#mvn generate-sources;
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
echo done!;"
system(cmd)
cmd=
"
rm src/main/java/* &&
cp gbm_pojo_test.java src/main/java/ &&
cp GenMod/GenModel.java src/main/java/
#mvn generate-sources;
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
echo done!;"
system(cmd)
system("ls")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
cmd=
"
rm src/main/java/* &&
cp gbm_pojo_test.java src/main/java/ &&
cp GenMod/GenModel.java src/main/java/
#mvn generate-sources;
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
#mvn generate-sources;
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
system(cmd)
system("ls")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
cmd=
"
rm src/main/java/*;
cp gbm_pojo_test.java src/main/java;
cp GenMod/GenModel.java src/main/java;
mvn generate-sources;
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
system(cmd)
system()
system("ls")
system("rm src/main/java/*")
system("rm src/main/java/*; cp gbm_pojo_test.java src/main/java")
system("rm src/main/java/* && cp gbm_pojo_test.java src/main/java")
system("rm src/main/java/* \; cp gbm_pojo_test.java src/main/java")
system("rm src/main/java/* & cp gbm_pojo_test.java src/main/java")
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
shell(cmd)
cmd=
"
rm src/main/java/*;
cp gbm_pojo_test.java src/main/java;
cp GenMod/GenModel.java src/main/java;
mvn generate-sources;
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
shell(cmd)
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
system("shell.sh")
#mv target/js/bundle.js .;
#mv bundle.js gbm_pojo_test.js;
#rm -rf target/;
#rm src/main/java/*;
#echo done!;"
system("shell.sh")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
system("shell.sh gbm_pojo_test.java gbm_pojo_test.js")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
system("shell.sh gbm_pojo_test.java gbm_pojo_test.js")
system("./shell.sh gbm_pojo_test.java gbm_pojo_test.js")
system("./shell.sh", input="gbm_pojo_test.java gbm_pojo_test.js")
source("pojoFilter.R")
source("jsweetFilter.R")
pojo_filter("gbm_pojo_test.java")
system("rm src/main/java/*")
system("cp gbm_pojo_test.js src/main/java")
system("cp gbm_pojo_test.java src/main/java")
system("cp GenMod/GenModel.java src/main/java")
system("cp GenMod/GenModel.java src/main/java")
system("mvn generate-sources")
system("mv target/js/bundle.js .")
system("mv bundle.js gbm_pojo_test.js")
system("rm -rf target/")
system("rm -r src/main/java/*")
jsweet_filter("gbm_pojo_test.js")
paste0(str_extract("sdfajlfkjldf/sdlfjlkdf/alfjdf/pojo_jake.java", regex('([^/]+)(?=\\.[^.]+)')),".js")
fn="pojo_jake.java"
paste("cp", fn, "src/main/java")
paste("mv bundle.js", jsOut)
jsOut="pojo_jake.js"
paste("mv bundle.js", jsOut)
print("sdf", "sdfd")
evaporate("gbm_pojo_test.java")
source("pojoFilter.R")
source("jsweetFilter.R")
evaporate <- function(pojo) {
# Get name of file when it is in JavaScript
jsOut=paste0(str_extract(pojo, regex('([^/]+)(?=\\.[^.]+)')),".js")
# Filter out POJO to make it H2O-independent
pojo_filter(pojo)
# bash commands to prepare & call JSweet
system("rm src/main/java/*")
system(paste("cp", pojo, "src/main/java"))
system("cp GenMod/GenModel.java src/main/java")
system("mvn generate-sources")
system("mv target/js/bundle.js .")
system(paste("mv bundle.js", jsOut))
system("rm -rf target/")
system("rm -r src/main/java/*")
# Finally, round out left-over java syntax from JSweet
jsweet_filter(jsOut)
print(paste(pojo, "has now been transpiled into", jsOut))
}
evaporate("gbm_pojo_test.java")
evaporate("gbm_pojo_test.java")
evaporate("gbm_pojo_test.java")
